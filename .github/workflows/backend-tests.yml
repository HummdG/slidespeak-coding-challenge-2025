name: Backend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"

env:
  TESTING: 1
  AWS_S3_BUCKET: test-bucket
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: testing
  AWS_SECRET_ACCESS_KEY: testing
  REDIS_URL: redis://localhost:6379/15
  UNOSERVER_HOST: test-unoserver
  UNOSERVER_PORT: 2004

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: |
          cd backend
          black --check . --diff

      - name: Check import sorting with isort
        run: |
          cd backend
          isort . --check-only --diff

      - name: Lint with flake8
        run: |
          cd backend
          flake8 .

      - name: Type checking with mypy
        run: |
          cd backend
          mypy . --ignore-missing-imports

      - name: Security check with bandit
        run: |
          cd backend
          bandit -r . -f json
        continue-on-error: true # Don't fail CI on security warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        test-category: ["unit", "integration"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 1
          done

      - name: Run ${{ matrix.test-category }} tests
        run: |
          cd backend
          chmod +x run_tests.sh
          ./run_tests.sh ${{ matrix.test-category }}

      - name: Generate coverage report
        if: matrix.test-category == 'unit' && matrix.python-version == '3.10'
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=html -m "not slow"

      - name: Upload coverage to Codecov
        if: matrix.test-category == 'unit' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          directory: ./backend/
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        if: matrix.test-category == 'unit' && matrix.python-version == '3.10'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/htmlcov/

  integration-with-services:
    name: Integration Tests with Services
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          cd backend
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          cd backend
          # Wait for web service to be healthy
          timeout 60 bash -c 'until docker-compose exec -T web curl -f http://localhost:8000/docs > /dev/null 2>&1; do sleep 2; done'
          # Wait for Redis
          timeout 60 bash -c 'until docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; do sleep 2; done'

      - name: Run integration tests in Docker
        run: |
          cd backend
          docker-compose exec -T web ./run_tests.sh integration

      - name: Get Docker logs on failure
        if: failure()
        run: |
          cd backend
          docker-compose logs web
          docker-compose logs celery
          docker-compose logs redis

      - name: Stop services
        if: always()
        run: |
          cd backend
          docker-compose down -v

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run performance tests
        run: |
          cd backend
          RUN_SLOW_TESTS=true ./run_tests.sh slow
        env:
          RUN_SLOW_TESTS: true

      - name: Benchmark API endpoints
        run: |
          cd backend
          # Run a simple benchmark (you might want to use locust or similar)
          python -c "
          import time
          import requests
          from fastapi.testclient import TestClient
          from app.main import app

          client = TestClient(app)

          # Warm up
          for _ in range(10):
              try:
                  client.get('/docs')
              except:
                  pass

          # Benchmark
          start = time.time()
          for _ in range(100):
              try:
                  client.get('/docs')
              except:
                  pass
          end = time.time()

          avg_time = (end - start) / 100
          print(f'Average response time: {avg_time:.4f}s')

          if avg_time > 0.1:  # 100ms threshold
              print('WARNING: API response time is slower than expected')
          "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install security tools
        run: |
          pip install safety bandit semgrep

      - name: Check for known vulnerabilities in dependencies
        run: |
          cd backend
          safety check -r requirements.txt --json
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Semgrep security analysis
        run: |
          cd backend
          semgrep --config=auto --json --output=semgrep-report.json .
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/semgrep-report.json
        if: always()

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, integration-with-services]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ Unit and integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit and integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.integration-with-services.result }}" == "success" ]]; then
            echo "✅ Service integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Service integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
